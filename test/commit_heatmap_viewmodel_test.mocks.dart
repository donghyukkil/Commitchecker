// Mocks generated by Mockito 5.4.4 from annotations
// in commitchecker/test/commit_heatmap_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:commitchecker/models/commit_info.dart' as _i4;
import 'package:commitchecker/viewmodels/commit_heatmap_viewmodel.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:table_calendar/table_calendar.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CommitHeatmapViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommitHeatmapViewModel extends _i1.Mock
    implements _i2.CommitHeatmapViewModel {
  MockCommitHeatmapViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set selectedRepository(String? _selectedRepository) => super.noSuchMethod(
        Invocation.setter(
          #selectedRepository,
          _selectedRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set mostActiveDay(String? _mostActiveDay) => super.noSuchMethod(
        Invocation.setter(
          #mostActiveDay,
          _mostActiveDay,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set mostActiveTime(String? _mostActiveTime) => super.noSuchMethod(
        Invocation.setter(
          #mostActiveTime,
          _mostActiveTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? _errorMessage) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          _errorMessage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get commitStatsMessage => (super.noSuchMethod(
        Invocation.getter(#commitStatsMessage),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#commitStatsMessage),
        ),
      ) as String);

  @override
  set commitStatsMessage(String? _commitStatsMessage) => super.noSuchMethod(
        Invocation.setter(
          #commitStatsMessage,
          _commitStatsMessage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get focusedDay => (super.noSuchMethod(
        Invocation.getter(#focusedDay),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#focusedDay),
        ),
      ) as DateTime);

  @override
  set focusedDay(DateTime? _focusedDay) => super.noSuchMethod(
        Invocation.setter(
          #focusedDay,
          _focusedDay,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedDay(DateTime? _selectedDay) => super.noSuchMethod(
        Invocation.setter(
          #selectedDay,
          _selectedDay,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<DateTime, List<_i4.CommitInfo>> get commitData => (super.noSuchMethod(
        Invocation.getter(#commitData),
        returnValue: <DateTime, List<_i4.CommitInfo>>{},
      ) as Map<DateTime, List<_i4.CommitInfo>>);

  @override
  set commitData(Map<DateTime, List<_i4.CommitInfo>>? _commitData) =>
      super.noSuchMethod(
        Invocation.setter(
          #commitData,
          _commitData,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedCommits(List<_i4.CommitInfo>? _selectedCommits) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCommits,
          _selectedCommits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get repositories => (super.noSuchMethod(
        Invocation.getter(#repositories),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set repositories(List<String>? _repositories) => super.noSuchMethod(
        Invocation.setter(
          #repositories,
          _repositories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(dynamic Function(String)? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.CalendarFormat get calendarFormat => (super.noSuchMethod(
        Invocation.getter(#calendarFormat),
        returnValue: _i5.CalendarFormat.month,
      ) as _i5.CalendarFormat);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> fetchCommitsForMonth(DateTime? targetDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommitsForMonth,
          [targetDate],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> fetchRepositories([String? username]) => (super.noSuchMethod(
        Invocation.method(
          #fetchRepositories,
          [username],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setSelectedRepository(String? repository) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSelectedRepository,
          [repository],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> calculateCommitsForRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateCommitsForRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  void setUsername(String? username) => super.noSuchMethod(
        Invocation.method(
          #setUsername,
          [username],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setCalendarFormat(_i5.CalendarFormat? format) => super.noSuchMethod(
        Invocation.method(
          #setCalendarFormat,
          [format],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setFocusedDay(DateTime? focusedDay) => super.noSuchMethod(
        Invocation.method(
          #setFocusedDay,
          [focusedDay],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDaySelected(
    DateTime? selectedDay,
    DateTime? focusedDay,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onDaySelected,
          [
            selectedDay,
            focusedDay,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String formatDate(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #formatDate,
          [date],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #formatDate,
            [date],
          ),
        ),
      ) as String);

  @override
  void toggleTwoWeeksFormat() => super.noSuchMethod(
        Invocation.method(
          #toggleTwoWeeksFormat,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
